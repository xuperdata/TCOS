// This file is generated by rust-protobuf 2.14.0. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![cfg_attr(rustfmt, rustfmt_skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unsafe_code)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `chainedbft.proto`

use protobuf::Message as Message_imported_for_functions;
use protobuf::ProtobufEnum as ProtobufEnum_imported_for_functions;

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_14_0;

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct QuorumCert {
    // message fields
    pub ProposalId: ::std::vec::Vec<u8>,
    pub ProposalMsg: ::std::vec::Vec<u8>,
    pub Type: QCState,
    pub ViewNumber: i64,
    pub SignInfos: ::protobuf::SingularPtrField<QCSignInfos>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QuorumCert {
    fn default() -> &'a QuorumCert {
        <QuorumCert as ::protobuf::Message>::default_instance()
    }
}

impl QuorumCert {
    pub fn new() -> QuorumCert {
        ::std::default::Default::default()
    }

    // bytes ProposalId = 1;


    pub fn get_ProposalId(&self) -> &[u8] {
        &self.ProposalId
    }
    pub fn clear_ProposalId(&mut self) {
        self.ProposalId.clear();
    }

    // Param is passed by value, moved
    pub fn set_ProposalId(&mut self, v: ::std::vec::Vec<u8>) {
        self.ProposalId = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ProposalId(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.ProposalId
    }

    // Take field
    pub fn take_ProposalId(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.ProposalId, ::std::vec::Vec::new())
    }

    // bytes ProposalMsg = 2;


    pub fn get_ProposalMsg(&self) -> &[u8] {
        &self.ProposalMsg
    }
    pub fn clear_ProposalMsg(&mut self) {
        self.ProposalMsg.clear();
    }

    // Param is passed by value, moved
    pub fn set_ProposalMsg(&mut self, v: ::std::vec::Vec<u8>) {
        self.ProposalMsg = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ProposalMsg(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.ProposalMsg
    }

    // Take field
    pub fn take_ProposalMsg(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.ProposalMsg, ::std::vec::Vec::new())
    }

    // .pb.QCState Type = 3;


    pub fn get_Type(&self) -> QCState {
        self.Type
    }
    pub fn clear_Type(&mut self) {
        self.Type = QCState::NEW_VIEW;
    }

    // Param is passed by value, moved
    pub fn set_Type(&mut self, v: QCState) {
        self.Type = v;
    }

    // int64 ViewNumber = 4;


    pub fn get_ViewNumber(&self) -> i64 {
        self.ViewNumber
    }
    pub fn clear_ViewNumber(&mut self) {
        self.ViewNumber = 0;
    }

    // Param is passed by value, moved
    pub fn set_ViewNumber(&mut self, v: i64) {
        self.ViewNumber = v;
    }

    // .pb.QCSignInfos SignInfos = 5;


    pub fn get_SignInfos(&self) -> &QCSignInfos {
        self.SignInfos.as_ref().unwrap_or_else(|| QCSignInfos::default_instance())
    }
    pub fn clear_SignInfos(&mut self) {
        self.SignInfos.clear();
    }

    pub fn has_SignInfos(&self) -> bool {
        self.SignInfos.is_some()
    }

    // Param is passed by value, moved
    pub fn set_SignInfos(&mut self, v: QCSignInfos) {
        self.SignInfos = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_SignInfos(&mut self) -> &mut QCSignInfos {
        if self.SignInfos.is_none() {
            self.SignInfos.set_default();
        }
        self.SignInfos.as_mut().unwrap()
    }

    // Take field
    pub fn take_SignInfos(&mut self) -> QCSignInfos {
        self.SignInfos.take().unwrap_or_else(|| QCSignInfos::new())
    }
}

impl ::protobuf::Message for QuorumCert {
    fn is_initialized(&self) -> bool {
        for v in &self.SignInfos {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.ProposalId)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.ProposalMsg)?;
                },
                3 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.Type, 3, &mut self.unknown_fields)?
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.ViewNumber = tmp;
                },
                5 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.SignInfos)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.ProposalId.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.ProposalId);
        }
        if !self.ProposalMsg.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.ProposalMsg);
        }
        if self.Type != QCState::NEW_VIEW {
            my_size += ::protobuf::rt::enum_size(3, self.Type);
        }
        if self.ViewNumber != 0 {
            my_size += ::protobuf::rt::value_size(4, self.ViewNumber, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.SignInfos.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.ProposalId.is_empty() {
            os.write_bytes(1, &self.ProposalId)?;
        }
        if !self.ProposalMsg.is_empty() {
            os.write_bytes(2, &self.ProposalMsg)?;
        }
        if self.Type != QCState::NEW_VIEW {
            os.write_enum(3, self.Type.value())?;
        }
        if self.ViewNumber != 0 {
            os.write_int64(4, self.ViewNumber)?;
        }
        if let Some(ref v) = self.SignInfos.as_ref() {
            os.write_tag(5, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QuorumCert {
        QuorumCert::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "ProposalId",
                    |m: &QuorumCert| { &m.ProposalId },
                    |m: &mut QuorumCert| { &mut m.ProposalId },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "ProposalMsg",
                    |m: &QuorumCert| { &m.ProposalMsg },
                    |m: &mut QuorumCert| { &mut m.ProposalMsg },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<QCState>>(
                    "Type",
                    |m: &QuorumCert| { &m.Type },
                    |m: &mut QuorumCert| { &mut m.Type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "ViewNumber",
                    |m: &QuorumCert| { &m.ViewNumber },
                    |m: &mut QuorumCert| { &mut m.ViewNumber },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<QCSignInfos>>(
                    "SignInfos",
                    |m: &QuorumCert| { &m.SignInfos },
                    |m: &mut QuorumCert| { &mut m.SignInfos },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<QuorumCert>(
                    "QuorumCert",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static QuorumCert {
        static mut instance: ::protobuf::lazy::Lazy<QuorumCert> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(QuorumCert::new)
        }
    }
}

impl ::protobuf::Clear for QuorumCert {
    fn clear(&mut self) {
        self.ProposalId.clear();
        self.ProposalMsg.clear();
        self.Type = QCState::NEW_VIEW;
        self.ViewNumber = 0;
        self.SignInfos.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QuorumCert {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QuorumCert {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct QCSignInfos {
    // message fields
    pub QCSignInfos: ::protobuf::RepeatedField<SignInfo>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a QCSignInfos {
    fn default() -> &'a QCSignInfos {
        <QCSignInfos as ::protobuf::Message>::default_instance()
    }
}

impl QCSignInfos {
    pub fn new() -> QCSignInfos {
        ::std::default::Default::default()
    }

    // repeated .pb.SignInfo QCSignInfos = 1;


    pub fn get_QCSignInfos(&self) -> &[SignInfo] {
        &self.QCSignInfos
    }
    pub fn clear_QCSignInfos(&mut self) {
        self.QCSignInfos.clear();
    }

    // Param is passed by value, moved
    pub fn set_QCSignInfos(&mut self, v: ::protobuf::RepeatedField<SignInfo>) {
        self.QCSignInfos = v;
    }

    // Mutable pointer to the field.
    pub fn mut_QCSignInfos(&mut self) -> &mut ::protobuf::RepeatedField<SignInfo> {
        &mut self.QCSignInfos
    }

    // Take field
    pub fn take_QCSignInfos(&mut self) -> ::protobuf::RepeatedField<SignInfo> {
        ::std::mem::replace(&mut self.QCSignInfos, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for QCSignInfos {
    fn is_initialized(&self) -> bool {
        for v in &self.QCSignInfos {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.QCSignInfos)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.QCSignInfos {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.QCSignInfos {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> QCSignInfos {
        QCSignInfos::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SignInfo>>(
                    "QCSignInfos",
                    |m: &QCSignInfos| { &m.QCSignInfos },
                    |m: &mut QCSignInfos| { &mut m.QCSignInfos },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<QCSignInfos>(
                    "QCSignInfos",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static QCSignInfos {
        static mut instance: ::protobuf::lazy::Lazy<QCSignInfos> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(QCSignInfos::new)
        }
    }
}

impl ::protobuf::Clear for QCSignInfos {
    fn clear(&mut self) {
        self.QCSignInfos.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for QCSignInfos {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for QCSignInfos {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct SignInfo {
    // message fields
    pub Address: ::std::string::String,
    pub PublicKey: ::std::string::String,
    pub Sign: ::std::vec::Vec<u8>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a SignInfo {
    fn default() -> &'a SignInfo {
        <SignInfo as ::protobuf::Message>::default_instance()
    }
}

impl SignInfo {
    pub fn new() -> SignInfo {
        ::std::default::Default::default()
    }

    // string Address = 1;


    pub fn get_Address(&self) -> &str {
        &self.Address
    }
    pub fn clear_Address(&mut self) {
        self.Address.clear();
    }

    // Param is passed by value, moved
    pub fn set_Address(&mut self, v: ::std::string::String) {
        self.Address = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Address(&mut self) -> &mut ::std::string::String {
        &mut self.Address
    }

    // Take field
    pub fn take_Address(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.Address, ::std::string::String::new())
    }

    // string PublicKey = 2;


    pub fn get_PublicKey(&self) -> &str {
        &self.PublicKey
    }
    pub fn clear_PublicKey(&mut self) {
        self.PublicKey.clear();
    }

    // Param is passed by value, moved
    pub fn set_PublicKey(&mut self, v: ::std::string::String) {
        self.PublicKey = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_PublicKey(&mut self) -> &mut ::std::string::String {
        &mut self.PublicKey
    }

    // Take field
    pub fn take_PublicKey(&mut self) -> ::std::string::String {
        ::std::mem::replace(&mut self.PublicKey, ::std::string::String::new())
    }

    // bytes Sign = 3;


    pub fn get_Sign(&self) -> &[u8] {
        &self.Sign
    }
    pub fn clear_Sign(&mut self) {
        self.Sign.clear();
    }

    // Param is passed by value, moved
    pub fn set_Sign(&mut self, v: ::std::vec::Vec<u8>) {
        self.Sign = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Sign(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.Sign
    }

    // Take field
    pub fn take_Sign(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.Sign, ::std::vec::Vec::new())
    }
}

impl ::protobuf::Message for SignInfo {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.Address)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_proto3_string_into(wire_type, is, &mut self.PublicKey)?;
                },
                3 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.Sign)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.Address.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.Address);
        }
        if !self.PublicKey.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.PublicKey);
        }
        if !self.Sign.is_empty() {
            my_size += ::protobuf::rt::bytes_size(3, &self.Sign);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.Address.is_empty() {
            os.write_string(1, &self.Address)?;
        }
        if !self.PublicKey.is_empty() {
            os.write_string(2, &self.PublicKey)?;
        }
        if !self.Sign.is_empty() {
            os.write_bytes(3, &self.Sign)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> SignInfo {
        SignInfo::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "Address",
                    |m: &SignInfo| { &m.Address },
                    |m: &mut SignInfo| { &mut m.Address },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeString>(
                    "PublicKey",
                    |m: &SignInfo| { &m.PublicKey },
                    |m: &mut SignInfo| { &mut m.PublicKey },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "Sign",
                    |m: &SignInfo| { &m.Sign },
                    |m: &mut SignInfo| { &mut m.Sign },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<SignInfo>(
                    "SignInfo",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static SignInfo {
        static mut instance: ::protobuf::lazy::Lazy<SignInfo> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(SignInfo::new)
        }
    }
}

impl ::protobuf::Clear for SignInfo {
    fn clear(&mut self) {
        self.Address.clear();
        self.PublicKey.clear();
        self.Sign.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for SignInfo {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for SignInfo {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct ChainedBftPhaseMessage {
    // message fields
    pub Type: QCState,
    pub ViewNumber: i64,
    pub ProposalQC: ::protobuf::SingularPtrField<QuorumCert>,
    pub JustifyQC: ::protobuf::SingularPtrField<QuorumCert>,
    pub MsgDigest: ::std::vec::Vec<u8>,
    pub Signature: ::protobuf::SingularPtrField<SignInfo>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ChainedBftPhaseMessage {
    fn default() -> &'a ChainedBftPhaseMessage {
        <ChainedBftPhaseMessage as ::protobuf::Message>::default_instance()
    }
}

impl ChainedBftPhaseMessage {
    pub fn new() -> ChainedBftPhaseMessage {
        ::std::default::Default::default()
    }

    // .pb.QCState Type = 1;


    pub fn get_Type(&self) -> QCState {
        self.Type
    }
    pub fn clear_Type(&mut self) {
        self.Type = QCState::NEW_VIEW;
    }

    // Param is passed by value, moved
    pub fn set_Type(&mut self, v: QCState) {
        self.Type = v;
    }

    // int64 ViewNumber = 2;


    pub fn get_ViewNumber(&self) -> i64 {
        self.ViewNumber
    }
    pub fn clear_ViewNumber(&mut self) {
        self.ViewNumber = 0;
    }

    // Param is passed by value, moved
    pub fn set_ViewNumber(&mut self, v: i64) {
        self.ViewNumber = v;
    }

    // .pb.QuorumCert ProposalQC = 3;


    pub fn get_ProposalQC(&self) -> &QuorumCert {
        self.ProposalQC.as_ref().unwrap_or_else(|| QuorumCert::default_instance())
    }
    pub fn clear_ProposalQC(&mut self) {
        self.ProposalQC.clear();
    }

    pub fn has_ProposalQC(&self) -> bool {
        self.ProposalQC.is_some()
    }

    // Param is passed by value, moved
    pub fn set_ProposalQC(&mut self, v: QuorumCert) {
        self.ProposalQC = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ProposalQC(&mut self) -> &mut QuorumCert {
        if self.ProposalQC.is_none() {
            self.ProposalQC.set_default();
        }
        self.ProposalQC.as_mut().unwrap()
    }

    // Take field
    pub fn take_ProposalQC(&mut self) -> QuorumCert {
        self.ProposalQC.take().unwrap_or_else(|| QuorumCert::new())
    }

    // .pb.QuorumCert JustifyQC = 4;


    pub fn get_JustifyQC(&self) -> &QuorumCert {
        self.JustifyQC.as_ref().unwrap_or_else(|| QuorumCert::default_instance())
    }
    pub fn clear_JustifyQC(&mut self) {
        self.JustifyQC.clear();
    }

    pub fn has_JustifyQC(&self) -> bool {
        self.JustifyQC.is_some()
    }

    // Param is passed by value, moved
    pub fn set_JustifyQC(&mut self, v: QuorumCert) {
        self.JustifyQC = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_JustifyQC(&mut self) -> &mut QuorumCert {
        if self.JustifyQC.is_none() {
            self.JustifyQC.set_default();
        }
        self.JustifyQC.as_mut().unwrap()
    }

    // Take field
    pub fn take_JustifyQC(&mut self) -> QuorumCert {
        self.JustifyQC.take().unwrap_or_else(|| QuorumCert::new())
    }

    // bytes MsgDigest = 5;


    pub fn get_MsgDigest(&self) -> &[u8] {
        &self.MsgDigest
    }
    pub fn clear_MsgDigest(&mut self) {
        self.MsgDigest.clear();
    }

    // Param is passed by value, moved
    pub fn set_MsgDigest(&mut self, v: ::std::vec::Vec<u8>) {
        self.MsgDigest = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_MsgDigest(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.MsgDigest
    }

    // Take field
    pub fn take_MsgDigest(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.MsgDigest, ::std::vec::Vec::new())
    }

    // .pb.SignInfo Signature = 6;


    pub fn get_Signature(&self) -> &SignInfo {
        self.Signature.as_ref().unwrap_or_else(|| SignInfo::default_instance())
    }
    pub fn clear_Signature(&mut self) {
        self.Signature.clear();
    }

    pub fn has_Signature(&self) -> bool {
        self.Signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_Signature(&mut self, v: SignInfo) {
        self.Signature = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Signature(&mut self) -> &mut SignInfo {
        if self.Signature.is_none() {
            self.Signature.set_default();
        }
        self.Signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_Signature(&mut self) -> SignInfo {
        self.Signature.take().unwrap_or_else(|| SignInfo::new())
    }
}

impl ::protobuf::Message for ChainedBftPhaseMessage {
    fn is_initialized(&self) -> bool {
        for v in &self.ProposalQC {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.JustifyQC {
            if !v.is_initialized() {
                return false;
            }
        };
        for v in &self.Signature {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.Type, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int64()?;
                    self.ViewNumber = tmp;
                },
                3 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.ProposalQC)?;
                },
                4 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.JustifyQC)?;
                },
                5 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.MsgDigest)?;
                },
                6 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.Signature)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.Type != QCState::NEW_VIEW {
            my_size += ::protobuf::rt::enum_size(1, self.Type);
        }
        if self.ViewNumber != 0 {
            my_size += ::protobuf::rt::value_size(2, self.ViewNumber, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.ProposalQC.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if let Some(ref v) = self.JustifyQC.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        if !self.MsgDigest.is_empty() {
            my_size += ::protobuf::rt::bytes_size(5, &self.MsgDigest);
        }
        if let Some(ref v) = self.Signature.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.Type != QCState::NEW_VIEW {
            os.write_enum(1, self.Type.value())?;
        }
        if self.ViewNumber != 0 {
            os.write_int64(2, self.ViewNumber)?;
        }
        if let Some(ref v) = self.ProposalQC.as_ref() {
            os.write_tag(3, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if let Some(ref v) = self.JustifyQC.as_ref() {
            os.write_tag(4, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        if !self.MsgDigest.is_empty() {
            os.write_bytes(5, &self.MsgDigest)?;
        }
        if let Some(ref v) = self.Signature.as_ref() {
            os.write_tag(6, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ChainedBftPhaseMessage {
        ChainedBftPhaseMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<QCState>>(
                    "Type",
                    |m: &ChainedBftPhaseMessage| { &m.Type },
                    |m: &mut ChainedBftPhaseMessage| { &mut m.Type },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt64>(
                    "ViewNumber",
                    |m: &ChainedBftPhaseMessage| { &m.ViewNumber },
                    |m: &mut ChainedBftPhaseMessage| { &mut m.ViewNumber },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<QuorumCert>>(
                    "ProposalQC",
                    |m: &ChainedBftPhaseMessage| { &m.ProposalQC },
                    |m: &mut ChainedBftPhaseMessage| { &mut m.ProposalQC },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<QuorumCert>>(
                    "JustifyQC",
                    |m: &ChainedBftPhaseMessage| { &m.JustifyQC },
                    |m: &mut ChainedBftPhaseMessage| { &mut m.JustifyQC },
                ));
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "MsgDigest",
                    |m: &ChainedBftPhaseMessage| { &m.MsgDigest },
                    |m: &mut ChainedBftPhaseMessage| { &mut m.MsgDigest },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SignInfo>>(
                    "Signature",
                    |m: &ChainedBftPhaseMessage| { &m.Signature },
                    |m: &mut ChainedBftPhaseMessage| { &mut m.Signature },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ChainedBftPhaseMessage>(
                    "ChainedBftPhaseMessage",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ChainedBftPhaseMessage {
        static mut instance: ::protobuf::lazy::Lazy<ChainedBftPhaseMessage> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ChainedBftPhaseMessage::new)
        }
    }
}

impl ::protobuf::Clear for ChainedBftPhaseMessage {
    fn clear(&mut self) {
        self.Type = QCState::NEW_VIEW;
        self.ViewNumber = 0;
        self.ProposalQC.clear();
        self.JustifyQC.clear();
        self.MsgDigest.clear();
        self.Signature.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ChainedBftPhaseMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChainedBftPhaseMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub struct ChainedBftVoteMessage {
    // message fields
    pub ProposalId: ::std::vec::Vec<u8>,
    pub Signature: ::protobuf::SingularPtrField<SignInfo>,
    // special fields
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub unknown_fields: ::protobuf::UnknownFields,
    #[cfg_attr(feature = "with-serde", serde(skip))]
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ChainedBftVoteMessage {
    fn default() -> &'a ChainedBftVoteMessage {
        <ChainedBftVoteMessage as ::protobuf::Message>::default_instance()
    }
}

impl ChainedBftVoteMessage {
    pub fn new() -> ChainedBftVoteMessage {
        ::std::default::Default::default()
    }

    // bytes ProposalId = 1;


    pub fn get_ProposalId(&self) -> &[u8] {
        &self.ProposalId
    }
    pub fn clear_ProposalId(&mut self) {
        self.ProposalId.clear();
    }

    // Param is passed by value, moved
    pub fn set_ProposalId(&mut self, v: ::std::vec::Vec<u8>) {
        self.ProposalId = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_ProposalId(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.ProposalId
    }

    // Take field
    pub fn take_ProposalId(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.ProposalId, ::std::vec::Vec::new())
    }

    // .pb.SignInfo Signature = 2;


    pub fn get_Signature(&self) -> &SignInfo {
        self.Signature.as_ref().unwrap_or_else(|| SignInfo::default_instance())
    }
    pub fn clear_Signature(&mut self) {
        self.Signature.clear();
    }

    pub fn has_Signature(&self) -> bool {
        self.Signature.is_some()
    }

    // Param is passed by value, moved
    pub fn set_Signature(&mut self, v: SignInfo) {
        self.Signature = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_Signature(&mut self) -> &mut SignInfo {
        if self.Signature.is_none() {
            self.Signature.set_default();
        }
        self.Signature.as_mut().unwrap()
    }

    // Take field
    pub fn take_Signature(&mut self) -> SignInfo {
        self.Signature.take().unwrap_or_else(|| SignInfo::new())
    }
}

impl ::protobuf::Message for ChainedBftVoteMessage {
    fn is_initialized(&self) -> bool {
        for v in &self.Signature {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.ProposalId)?;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.Signature)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.ProposalId.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.ProposalId);
        }
        if let Some(ref v) = self.Signature.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.ProposalId.is_empty() {
            os.write_bytes(1, &self.ProposalId)?;
        }
        if let Some(ref v) = self.Signature.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ChainedBftVoteMessage {
        ChainedBftVoteMessage::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                let mut fields = ::std::vec::Vec::new();
                fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                    "ProposalId",
                    |m: &ChainedBftVoteMessage| { &m.ProposalId },
                    |m: &mut ChainedBftVoteMessage| { &mut m.ProposalId },
                ));
                fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<SignInfo>>(
                    "Signature",
                    |m: &ChainedBftVoteMessage| { &m.Signature },
                    |m: &mut ChainedBftVoteMessage| { &mut m.Signature },
                ));
                ::protobuf::reflect::MessageDescriptor::new_pb_name::<ChainedBftVoteMessage>(
                    "ChainedBftVoteMessage",
                    fields,
                    file_descriptor_proto()
                )
            })
        }
    }

    fn default_instance() -> &'static ChainedBftVoteMessage {
        static mut instance: ::protobuf::lazy::Lazy<ChainedBftVoteMessage> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            instance.get(ChainedBftVoteMessage::new)
        }
    }
}

impl ::protobuf::Clear for ChainedBftVoteMessage {
    fn clear(&mut self) {
        self.ProposalId.clear();
        self.Signature.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ChainedBftVoteMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChainedBftVoteMessage {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
#[cfg_attr(feature = "with-serde", derive(Serialize, Deserialize))]
pub enum QCState {
    NEW_VIEW = 0,
    PREPARE = 1,
    PRE_COMMIT = 2,
    COMMIT = 3,
    DECIDE = 4,
}

impl ::protobuf::ProtobufEnum for QCState {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<QCState> {
        match value {
            0 => ::std::option::Option::Some(QCState::NEW_VIEW),
            1 => ::std::option::Option::Some(QCState::PREPARE),
            2 => ::std::option::Option::Some(QCState::PRE_COMMIT),
            3 => ::std::option::Option::Some(QCState::COMMIT),
            4 => ::std::option::Option::Some(QCState::DECIDE),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [QCState] = &[
            QCState::NEW_VIEW,
            QCState::PREPARE,
            QCState::PRE_COMMIT,
            QCState::COMMIT,
            QCState::DECIDE,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static mut descriptor: ::protobuf::lazy::Lazy<::protobuf::reflect::EnumDescriptor> = ::protobuf::lazy::Lazy::INIT;
        unsafe {
            descriptor.get(|| {
                ::protobuf::reflect::EnumDescriptor::new_pb_name::<QCState>("QCState", file_descriptor_proto())
            })
        }
    }
}

impl ::std::marker::Copy for QCState {
}

impl ::std::default::Default for QCState {
    fn default() -> Self {
        QCState::NEW_VIEW
    }
}

impl ::protobuf::reflect::ProtobufValue for QCState {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(self.descriptor())
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x10chainedbft.proto\x12\x02pb\"\xbe\x01\n\nQuorumCert\x12\x1e\n\nProp\
    osalId\x18\x01\x20\x01(\x0cR\nProposalId\x12\x20\n\x0bProposalMsg\x18\
    \x02\x20\x01(\x0cR\x0bProposalMsg\x12\x1f\n\x04Type\x18\x03\x20\x01(\x0e\
    2\x0b.pb.QCStateR\x04Type\x12\x1e\n\nViewNumber\x18\x04\x20\x01(\x03R\nV\
    iewNumber\x12-\n\tSignInfos\x18\x05\x20\x01(\x0b2\x0f.pb.QCSignInfosR\tS\
    ignInfos\"=\n\x0bQCSignInfos\x12.\n\x0bQCSignInfos\x18\x01\x20\x03(\x0b2\
    \x0c.pb.SignInfoR\x0bQCSignInfos\"V\n\x08SignInfo\x12\x18\n\x07Address\
    \x18\x01\x20\x01(\tR\x07Address\x12\x1c\n\tPublicKey\x18\x02\x20\x01(\tR\
    \tPublicKey\x12\x12\n\x04Sign\x18\x03\x20\x01(\x0cR\x04Sign\"\x81\x02\n\
    \x16ChainedBftPhaseMessage\x12\x1f\n\x04Type\x18\x01\x20\x01(\x0e2\x0b.p\
    b.QCStateR\x04Type\x12\x1e\n\nViewNumber\x18\x02\x20\x01(\x03R\nViewNumb\
    er\x12.\n\nProposalQC\x18\x03\x20\x01(\x0b2\x0e.pb.QuorumCertR\nProposal\
    QC\x12,\n\tJustifyQC\x18\x04\x20\x01(\x0b2\x0e.pb.QuorumCertR\tJustifyQC\
    \x12\x1c\n\tMsgDigest\x18\x05\x20\x01(\x0cR\tMsgDigest\x12*\n\tSignature\
    \x18\x06\x20\x01(\x0b2\x0c.pb.SignInfoR\tSignature\"c\n\x15ChainedBftVot\
    eMessage\x12\x1e\n\nProposalId\x18\x01\x20\x01(\x0cR\nProposalId\x12*\n\
    \tSignature\x18\x02\x20\x01(\x0b2\x0c.pb.SignInfoR\tSignature*L\n\x07QCS\
    tate\x12\x0c\n\x08NEW_VIEW\x10\0\x12\x0b\n\x07PREPARE\x10\x01\x12\x0e\n\
    \nPRE_COMMIT\x10\x02\x12\n\n\x06COMMIT\x10\x03\x12\n\n\x06DECIDE\x10\x04\
    b\x06proto3\
";

static mut file_descriptor_proto_lazy: ::protobuf::lazy::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::lazy::Lazy::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    unsafe {
        file_descriptor_proto_lazy.get(|| {
            parse_descriptor_proto()
        })
    }
}
