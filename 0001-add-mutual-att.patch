From eeab48c40951ebae8a0f8d9dd4813d08ef8f2e34 Mon Sep 17 00:00:00 2001
From: duanbing <hibduan@gmail.com>
Date: Thu, 6 Aug 2020 17:01:43 +0000
Subject: [PATCH] add mutual att

---
 src/Enclave.edl                               |   7 +
 src/libos/Cargo.lock                          | 641 +++++++++++++++++-
 src/libos/Cargo.toml                          |   1 +
 src/libos/src/entry.rs                        |  27 +
 .../src/util/sgx/sgx_attestation_agent.rs     |  26 +-
 src/pal/include/occlum_pal_api.h              |   2 +
 src/pal/src/ocalls/attestation.c              |   7 +
 src/pal/src/ocalls/env.c                      |   5 +
 src/pal/src/ocalls/net.c                      |  27 +
 9 files changed, 714 insertions(+), 29 deletions(-)
 create mode 100644 src/pal/src/ocalls/env.c

diff --git a/src/Enclave.edl b/src/Enclave.edl
index c1ada32..080bf87 100644
--- a/src/Enclave.edl
+++ b/src/Enclave.edl
@@ -204,5 +204,12 @@ enclave {
         ) propagate_errno;
 
         int occlum_ocall_tkill(int tid, int signum) propagate_errno;
+	char * u_getenv_ocall([in, string] const char *name);
+        sgx_status_t occlum_ocall_sgx_calc_quote_size (
+            [in, size=sig_rl_size] uint8_t * p_sig_rl,
+	    uint32_t sig_rl_size,
+	    [out] uint32_t* p_quote_size
+	);
+	int ocall_sgx_get_ias_socket();
     };
 };
diff --git a/src/libos/Cargo.lock b/src/libos/Cargo.lock
index be5764f..3668782 100644
--- a/src/libos/Cargo.lock
+++ b/src/libos/Cargo.lock
@@ -8,21 +8,39 @@ dependencies = [
  "bitvec",
  "derive_builder",
  "lazy_static",
- "log",
+ "log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)",
+ "mesatee_sdk",
  "rcore-fs",
  "rcore-fs-mountfs",
  "rcore-fs-ramfs",
  "rcore-fs-sefs",
- "serde",
- "serde_json",
- "sgx_tcrypto",
- "sgx_trts",
- "sgx_tse",
+ "serde 1.0.104",
+ "serde_json 1.0.40",
+ "sgx_tcrypto 1.1.2",
+ "sgx_trts 1.1.2",
+ "sgx_tse 1.1.2",
  "sgx_tstd",
- "sgx_types",
+ "sgx_types 1.1.2",
  "xmas-elf",
 ]
 
+[[package]]
+name = "aho-corasick"
+version = "0.7.10"
+source = "git+https://github.com/mesalock-linux/aho-corasick-sgx#ae5c0d76d21a127af6c61015d5fc6299fc119c15"
+dependencies = [
+ "memchr",
+ "sgx_tstd",
+]
+
+[[package]]
+name = "anyhow"
+version = "1.0.28"
+source = "git+https://github.com/mesalock-linux/anyhow-sgx#b78ca3528c24fb2e37aa33f3b76c030ad3c1d719"
+dependencies = [
+ "sgx_tstd",
+]
+
 [[package]]
 name = "autocfg"
 version = "0.1.7"
@@ -35,6 +53,20 @@ version = "1.0.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "f8aac770f1885fd7e387acedd76065302551364496e46b3dd00860b2f8359b9d"
 
+[[package]]
+name = "base64"
+version = "0.10.1"
+source = "git+https://github.com/mesalock-linux/rust-base64-sgx#cdc4f4ab79522f75e4d178c3dcc0b1f0770c6a86"
+dependencies = [
+ "sgx_tstd",
+]
+
+[[package]]
+name = "bit-vec"
+version = "0.6.2"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "5f0dc55f2d8a1a85650ac47858bb001b4c0dd73d79e3c455a842925e68d29cd3"
+
 [[package]]
 name = "bitflags"
 version = "1.2.1"
@@ -51,6 +83,24 @@ dependencies = [
  "radium",
 ]
 
+[[package]]
+name = "byteorder"
+version = "1.3.4"
+source = "git+https://github.com/mesalock-linux/byteorder-sgx#46ab71b0753dd29ec4f1b3834f78ae26cf47422e"
+dependencies = [
+ "sgx_tstd",
+]
+
+[[package]]
+name = "c2-chacha"
+version = "0.2.3"
+source = "git+https://github.com/mesalock-linux/cryptocorrosion-sgx#b31e8668ee0d09678a239a01e6dbcad033e1197f"
+dependencies = [
+ "byteorder",
+ "ppv-lite86",
+ "stream-cipher",
+]
+
 [[package]]
 name = "cc"
 version = "1.0.52"
@@ -63,6 +113,16 @@ version = "0.1.10"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "4785bdd1c96b2a846b2bd7cc02e86b6b3dbf14e7e53446c4f54c92a361040822"
 
+[[package]]
+name = "chrono"
+version = "0.4.11"
+source = "git+https://github.com/mesalock-linux/chrono-sgx#43d452d9dc6fc3d2ef90bf1901486d7093cdb804"
+dependencies = [
+ "num-integer",
+ "num-traits",
+ "sgx_tstd",
+]
+
 [[package]]
 name = "cloudabi"
 version = "0.0.3"
@@ -138,6 +198,38 @@ version = "1.5.3"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "bb1f6b1ce1c140482ea30ddd3335fc0024ac7ee112895426e0a629a6c20adfe3"
 
+[[package]]
+name = "env_logger"
+version = "0.7.1"
+source = "git+https://github.com/mesalock-linux/env_logger-sgx#fbc36d64535561b3aa10a24f367bb21c9287232d"
+dependencies = [
+ "humantime",
+ "log 0.4.8 (git+https://github.com/mesalock-linux/log-sgx)",
+ "regex",
+ "sgx_tstd",
+ "termcolor",
+]
+
+[[package]]
+name = "fns_client"
+version = "0.1.0"
+dependencies = [
+ "cfg-if",
+ "fns_proto",
+ "mesatee_core",
+ "sgx_tstd",
+]
+
+[[package]]
+name = "fns_proto"
+version = "0.1.0"
+dependencies = [
+ "cfg-if",
+ "serde 1.0.106",
+ "serde_derive 1.0.106",
+ "sgx_tstd",
+]
+
 [[package]]
 name = "fnv"
 version = "1.0.6"
@@ -150,6 +242,26 @@ version = "0.1.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "a06f77d526c1a601b7c4cdd98f54b5eaabffc14d5f2f0296febdc7f357c6d3ba"
 
+[[package]]
+name = "generic-array"
+version = "0.12.3"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "c68f0274ae0e023facc3c97b2e00f076be70e254bc851d972503b328db79b2ec"
+dependencies = [
+ "typenum",
+]
+
+[[package]]
+name = "getrandom"
+version = "0.1.14"
+source = "git+https://github.com/mesalock-linux/getrandom-sgx.git#66a998d6a06ef0a91a14921a322fe7fa621c6a6e"
+dependencies = [
+ "cfg-if",
+ "sgx_libc 1.1.2 (git+https://github.com/apache/teaclave-sgx-sdk?rev=v1.1.2)",
+ "sgx_trts 1.1.2 (git+https://github.com/apache/teaclave-sgx-sdk?rev=v1.1.2)",
+ "sgx_tstd",
+]
+
 [[package]]
 name = "hashbrown_tstd"
 version = "0.7.1"
@@ -157,12 +269,43 @@ dependencies = [
  "autocfg 1.0.0",
 ]
 
+[[package]]
+name = "httparse"
+version = "1.3.4"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "cd179ae861f0c2e53da70d892f5f3029f9594be0c41dc5269cd371691b1dc2f9"
+
+[[package]]
+name = "humantime"
+version = "1.3.0"
+source = "git+https://github.com/mesalock-linux/humantime-sgx#d50b0b4461f07dd8b44236a6d69b335357689436"
+dependencies = [
+ "quick-error",
+ "sgx_tstd",
+]
+
 [[package]]
 name = "ident_case"
 version = "1.0.1"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "b9e0384b61958566e926dc50660321d12159025e767c18e043daf26b70104c39"
 
+[[package]]
+name = "ipc_attribute"
+version = "0.1.0"
+dependencies = [
+ "quote 0.6.13",
+ "syn 0.15.44",
+]
+
+[[package]]
+name = "itoa"
+version = "0.4.5"
+source = "git+https://github.com/mesalock-linux/itoa-sgx.git#a49118cf1bc9ab4599c1f2b2cccc4f3f8c0ec38a"
+dependencies = [
+ "sgx_tstd",
+]
+
 [[package]]
 name = "itoa"
 version = "0.4.5"
@@ -185,6 +328,15 @@ version = "0.2.69"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "99e85c08494b21a9054e7fe1374a732aeadaff3980b6990b94bfd3a70f690005"
 
+[[package]]
+name = "log"
+version = "0.4.8"
+source = "git+https://github.com/mesalock-linux/log-sgx#d08c18ff0585d2d4948e658e55c516b404ebdecf"
+dependencies = [
+ "cfg-if",
+ "sgx_tstd",
+]
+
 [[package]]
 name = "log"
 version = "0.4.8"
@@ -194,6 +346,108 @@ dependencies = [
  "cfg-if",
 ]
 
+[[package]]
+name = "memchr"
+version = "2.2.1"
+source = "git+https://github.com/mesalock-linux/rust-memchr-sgx#44e36be54075a1afdf8180e443fd7f8cbd9d4c7b"
+dependencies = [
+ "sgx_libc 1.1.2 (git+https://github.com/apache/teaclave-sgx-sdk?rev=v1.1.2)",
+ "sgx_tstd",
+ "sgx_types 1.1.2 (git+https://github.com/apache/teaclave-sgx-sdk?rev=v1.1.2)",
+]
+
+[[package]]
+name = "mesatee_core"
+version = "0.1.0"
+dependencies = [
+ "base64",
+ "bit-vec",
+ "cfg-if",
+ "chrono",
+ "env_logger",
+ "httparse",
+ "ipc_attribute",
+ "lazy_static",
+ "log 0.4.8 (git+https://github.com/mesalock-linux/log-sgx)",
+ "net2",
+ "num-bigint",
+ "ring",
+ "rustls",
+ "serde 1.0.106",
+ "serde_derive 1.0.106",
+ "serde_json 1.0.51",
+ "sgx_rand",
+ "sgx_tcrypto 1.1.2 (git+https://github.com/apache/teaclave-sgx-sdk?rev=v1.1.2)",
+ "sgx_tse 1.1.2 (git+https://github.com/apache/teaclave-sgx-sdk?rev=v1.1.2)",
+ "sgx_tstd",
+ "sgx_types 1.1.2 (git+https://github.com/apache/teaclave-sgx-sdk?rev=v1.1.2)",
+ "sgx_urts",
+ "teaclave_attestation",
+ "teaclave_config",
+ "teaclave_utils",
+ "toml",
+ "uuid 0.8.1",
+ "webpki",
+ "webpki-roots",
+ "yasna",
+]
+
+[[package]]
+name = "mesatee_sdk"
+version = "0.1.0"
+dependencies = [
+ "fns_client",
+ "mesatee_core",
+ "sgx_tstd",
+ "teaclave_utils",
+ "uuid 0.8.1",
+]
+
+[[package]]
+name = "net2"
+version = "0.2.33"
+source = "git+https://github.com/mesalock-linux/net2-rs-sgx#058ec06a9473af4259ff9c7d3dbe234ea915a42f"
+dependencies = [
+ "cfg-if",
+ "sgx_libc 1.1.2 (git+https://github.com/apache/teaclave-sgx-sdk?rev=v1.1.2)",
+ "sgx_tstd",
+]
+
+[[package]]
+name = "num-bigint"
+version = "0.2.5"
+source = "git+https://github.com/mesalock-linux/num-bigint-sgx#377ecfb8bfac838418e80af9ed6cc74a627ca9c9"
+dependencies = [
+ "autocfg 1.0.0",
+ "num-integer",
+ "num-traits",
+ "sgx_tstd",
+]
+
+[[package]]
+name = "num-integer"
+version = "0.1.41"
+source = "git+https://github.com/mesalock-linux/num-integer-sgx#0ece2da7c01233749769a1574f61236d1569b2b9"
+dependencies = [
+ "autocfg 0.1.7",
+ "num-traits",
+ "sgx_tstd",
+]
+
+[[package]]
+name = "num-traits"
+version = "0.2.10"
+source = "git+https://github.com/mesalock-linux/num-traits-sgx#7551dca0b9f9fb86375bf1a84048d53f72d5ad79"
+dependencies = [
+ "autocfg 0.1.7",
+ "sgx_tstd",
+]
+
+[[package]]
+name = "ppv-lite86"
+version = "0.2.6"
+source = "git+https://github.com/mesalock-linux/cryptocorrosion-sgx#b31e8668ee0d09678a239a01e6dbcad033e1197f"
+
 [[package]]
 name = "proc-macro2"
 version = "0.4.30"
@@ -212,6 +466,11 @@ dependencies = [
  "unicode-xid 0.2.0",
 ]
 
+[[package]]
+name = "quick-error"
+version = "1.2.2"
+source = "git+https://github.com/mesalock-linux/quick-error-sgx#c77b8867336fff708f5567c7e051227af07139ea"
+
 [[package]]
 name = "quote"
 version = "0.6.13"
@@ -244,7 +503,7 @@ checksum = "6d71dacdc3c88c1fde3885a3be3fbab9f35724e6ce99467f7d9c5026132184ca"
 dependencies = [
  "autocfg 0.1.7",
  "libc",
- "rand_chacha",
+ "rand_chacha 0.1.1",
  "rand_core 0.4.2",
  "rand_hc",
  "rand_isaac",
@@ -255,6 +514,17 @@ dependencies = [
  "winapi",
 ]
 
+[[package]]
+name = "rand"
+version = "0.7.3"
+source = "git+https://github.com/mesalock-linux/rand-sgx?tag=v0.7.3_sgx1.1.2#a6a7eccfd4f574b9dc87fec88ca779a12cae1ab0"
+dependencies = [
+ "getrandom",
+ "rand_chacha 0.2.1",
+ "rand_core 0.5.1",
+ "sgx_tstd",
+]
+
 [[package]]
 name = "rand_chacha"
 version = "0.1.1"
@@ -265,6 +535,16 @@ dependencies = [
  "rand_core 0.3.1",
 ]
 
+[[package]]
+name = "rand_chacha"
+version = "0.2.1"
+source = "git+https://github.com/mesalock-linux/rand-sgx?tag=v0.7.3_sgx1.1.2#a6a7eccfd4f574b9dc87fec88ca779a12cae1ab0"
+dependencies = [
+ "c2-chacha",
+ "rand_core 0.5.1",
+ "sgx_tstd",
+]
+
 [[package]]
 name = "rand_core"
 version = "0.3.1"
@@ -280,6 +560,15 @@ version = "0.4.2"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "9c33a3c44ca05fa6f1807d8e6743f3824e8509beca625669633be0acbdf509dc"
 
+[[package]]
+name = "rand_core"
+version = "0.5.1"
+source = "git+https://github.com/mesalock-linux/rand-sgx?tag=v0.7.3_sgx1.1.2#a6a7eccfd4f574b9dc87fec88ca779a12cae1ab0"
+dependencies = [
+ "getrandom",
+ "sgx_tstd",
+]
+
 [[package]]
 name = "rand_hc"
 version = "0.1.0"
@@ -354,7 +643,7 @@ name = "rcore-fs-mountfs"
 version = "0.1.0"
 dependencies = [
  "lazy_static",
- "log",
+ "log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)",
  "rcore-fs",
  "spin",
 ]
@@ -363,7 +652,7 @@ dependencies = [
 name = "rcore-fs-ramfs"
 version = "0.1.0"
 dependencies = [
- "log",
+ "log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)",
  "rcore-fs",
  "spin",
 ]
@@ -373,11 +662,11 @@ name = "rcore-fs-sefs"
 version = "0.1.0"
 dependencies = [
  "bitvec",
- "log",
+ "log 0.4.8 (registry+https://github.com/rust-lang/crates.io-index)",
  "rcore-fs",
  "spin",
  "static_assertions",
- "uuid",
+ "uuid 0.7.4",
 ]
 
 [[package]]
@@ -389,17 +678,80 @@ dependencies = [
  "rand_core 0.3.1",
 ]
 
+[[package]]
+name = "regex"
+version = "1.3.1"
+source = "git+https://github.com/mesalock-linux/regex-sgx#cf45cc1a0c0472300fea7dc353c660e531ba5f2c"
+dependencies = [
+ "aho-corasick",
+ "memchr",
+ "regex-syntax",
+ "sgx_tstd",
+ "thread_local",
+]
+
+[[package]]
+name = "regex-syntax"
+version = "0.6.12"
+source = "git+https://github.com/mesalock-linux/regex-sgx#cf45cc1a0c0472300fea7dc353c660e531ba5f2c"
+dependencies = [
+ "sgx_tstd",
+]
+
+[[package]]
+name = "ring"
+version = "0.16.11"
+source = "git+https://github.com/mesalock-linux/ring-sgx?tag=v0.16.5#5311ddb2d335ddabf7a00f94efd8e7a5f7a9f728"
+dependencies = [
+ "cc",
+ "sgx_tstd",
+ "spin",
+ "untrusted",
+]
+
+[[package]]
+name = "rustls"
+version = "0.16.0"
+source = "git+https://github.com/mesalock-linux/rustls?branch=mesalock_sgx#ce26c885355fde79d45a27a6bbca490d9e8fcc0e"
+dependencies = [
+ "base64",
+ "log 0.4.8 (git+https://github.com/mesalock-linux/log-sgx)",
+ "ring",
+ "sct",
+ "sgx_tstd",
+ "webpki",
+]
+
 [[package]]
 name = "ryu"
 version = "1.0.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "ed3d612bc64430efeb3f7ee6ef26d590dce0c43249217bddc62112540c7941e1"
 
+[[package]]
+name = "sct"
+version = "0.6.0"
+source = "git+https://github.com/mesalock-linux/sct.rs?branch=mesalock_sgx#b16fb044362e6722566dbeb171e537c50dcb0501"
+dependencies = [
+ "ring",
+ "sgx_tstd",
+ "untrusted",
+]
+
 [[package]]
 name = "serde"
 version = "1.0.104"
 dependencies = [
- "serde_derive",
+ "serde_derive 1.0.104",
+ "sgx_tstd",
+]
+
+[[package]]
+name = "serde"
+version = "1.0.106"
+source = "git+https://github.com/mesalock-linux/serde-sgx#58ff0793d46f96124132110880d0f4d44050d6ee"
+dependencies = [
+ "serde_derive 1.0.106",
  "sgx_tstd",
 ]
 
@@ -412,13 +764,34 @@ dependencies = [
  "syn 1.0.19",
 ]
 
+[[package]]
+name = "serde_derive"
+version = "1.0.106"
+source = "git+https://github.com/mesalock-linux/serde-sgx#58ff0793d46f96124132110880d0f4d44050d6ee"
+dependencies = [
+ "proc-macro2 1.0.12",
+ "quote 1.0.4",
+ "syn 1.0.19",
+]
+
 [[package]]
 name = "serde_json"
 version = "1.0.40"
 dependencies = [
- "itoa",
+ "itoa 0.4.5",
+ "ryu",
+ "serde 1.0.104",
+ "sgx_tstd",
+]
+
+[[package]]
+name = "serde_json"
+version = "1.0.51"
+source = "git+https://github.com/mesalock-linux/serde-json-sgx#3fe8bd43ff5627f410efba9c67bb3d31f22b3bec"
+dependencies = [
+ "itoa 0.4.5 (git+https://github.com/mesalock-linux/itoa-sgx.git)",
  "ryu",
- "serde",
+ "serde 1.0.106",
  "sgx_tstd",
 ]
 
@@ -432,7 +805,7 @@ version = "1.1.2"
 dependencies = [
  "cc",
  "sgx_build_helper",
- "sgx_libc",
+ "sgx_libc 1.1.2",
 ]
 
 [[package]]
@@ -446,38 +819,81 @@ version = "1.1.2"
 [[package]]
 name = "sgx_libc"
 version = "1.1.2"
+source = "git+https://github.com/apache/teaclave-sgx-sdk?rev=v1.1.2#8f065be7a442157bf16dc7106feb795ea1c578eb"
 dependencies = [
- "sgx_types",
+ "sgx_types 1.1.2 (git+https://github.com/apache/teaclave-sgx-sdk?rev=v1.1.2)",
+]
+
+[[package]]
+name = "sgx_libc"
+version = "1.1.2"
+dependencies = [
+ "sgx_types 1.1.2",
+]
+
+[[package]]
+name = "sgx_rand"
+version = "1.1.2"
+source = "git+https://github.com/apache/teaclave-sgx-sdk?rev=v1.1.2#8f065be7a442157bf16dc7106feb795ea1c578eb"
+dependencies = [
+ "sgx_trts 1.1.2 (git+https://github.com/apache/teaclave-sgx-sdk?rev=v1.1.2)",
+ "sgx_tstd",
+ "sgx_types 1.1.2 (git+https://github.com/apache/teaclave-sgx-sdk?rev=v1.1.2)",
+]
+
+[[package]]
+name = "sgx_tcrypto"
+version = "1.1.2"
+source = "git+https://github.com/apache/teaclave-sgx-sdk?rev=v1.1.2#8f065be7a442157bf16dc7106feb795ea1c578eb"
+dependencies = [
+ "sgx_types 1.1.2 (git+https://github.com/apache/teaclave-sgx-sdk?rev=v1.1.2)",
 ]
 
 [[package]]
 name = "sgx_tcrypto"
 version = "1.1.2"
 dependencies = [
- "sgx_types",
+ "sgx_types 1.1.2",
 ]
 
 [[package]]
 name = "sgx_tprotected_fs"
 version = "1.1.2"
 dependencies = [
- "sgx_trts",
- "sgx_types",
+ "sgx_trts 1.1.2",
+ "sgx_types 1.1.2",
 ]
 
 [[package]]
 name = "sgx_trts"
 version = "1.1.2"
+source = "git+https://github.com/apache/teaclave-sgx-sdk?rev=v1.1.2#8f065be7a442157bf16dc7106feb795ea1c578eb"
 dependencies = [
- "sgx_libc",
- "sgx_types",
+ "sgx_libc 1.1.2 (git+https://github.com/apache/teaclave-sgx-sdk?rev=v1.1.2)",
+ "sgx_types 1.1.2 (git+https://github.com/apache/teaclave-sgx-sdk?rev=v1.1.2)",
+]
+
+[[package]]
+name = "sgx_trts"
+version = "1.1.2"
+dependencies = [
+ "sgx_libc 1.1.2",
+ "sgx_types 1.1.2",
+]
+
+[[package]]
+name = "sgx_tse"
+version = "1.1.2"
+source = "git+https://github.com/apache/teaclave-sgx-sdk?rev=v1.1.2#8f065be7a442157bf16dc7106feb795ea1c578eb"
+dependencies = [
+ "sgx_types 1.1.2 (git+https://github.com/apache/teaclave-sgx-sdk?rev=v1.1.2)",
 ]
 
 [[package]]
 name = "sgx_tse"
 version = "1.1.2"
 dependencies = [
- "sgx_types",
+ "sgx_types 1.1.2",
 ]
 
 [[package]]
@@ -488,13 +904,18 @@ dependencies = [
  "sgx_alloc",
  "sgx_backtrace_sys",
  "sgx_demangle",
- "sgx_libc",
+ "sgx_libc 1.1.2",
  "sgx_tprotected_fs",
- "sgx_trts",
- "sgx_types",
+ "sgx_trts 1.1.2",
+ "sgx_types 1.1.2",
  "sgx_unwind",
 ]
 
+[[package]]
+name = "sgx_types"
+version = "1.1.2"
+source = "git+https://github.com/apache/teaclave-sgx-sdk?rev=v1.1.2#8f065be7a442157bf16dc7106feb795ea1c578eb"
+
 [[package]]
 name = "sgx_types"
 version = "1.1.2"
@@ -506,6 +927,15 @@ dependencies = [
  "sgx_build_helper",
 ]
 
+[[package]]
+name = "sgx_urts"
+version = "1.1.2"
+source = "git+https://github.com/apache/teaclave-sgx-sdk?rev=v1.1.2#8f065be7a442157bf16dc7106feb795ea1c578eb"
+dependencies = [
+ "libc",
+ "sgx_types 1.1.2 (git+https://github.com/apache/teaclave-sgx-sdk?rev=v1.1.2)",
+]
+
 [[package]]
 name = "spin"
 version = "0.5.2"
@@ -518,6 +948,14 @@ version = "0.3.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "7f3eb36b47e512f8f1c9e3d10c2c1965bc992bd9cdb024fa581e2194501c83d3"
 
+[[package]]
+name = "stream-cipher"
+version = "0.3.2"
+source = "git+https://github.com/mesalock-linux/rustcrypto-traits-sgx#1046ef3f5d20e6dc8030cca5e60faa37884c3814"
+dependencies = [
+ "generic-array",
+]
+
 [[package]]
 name = "strsim"
 version = "0.7.0"
@@ -546,6 +984,110 @@ dependencies = [
  "unicode-xid 0.2.0",
 ]
 
+[[package]]
+name = "teaclave_attestation"
+version = "0.1.0"
+dependencies = [
+ "anyhow",
+ "base64",
+ "bit-vec",
+ "cfg-if",
+ "chrono",
+ "env_logger",
+ "httparse",
+ "log 0.4.8 (git+https://github.com/mesalock-linux/log-sgx)",
+ "num-bigint",
+ "rustls",
+ "serde_json 1.0.51",
+ "sgx_rand",
+ "sgx_tcrypto 1.1.2 (git+https://github.com/apache/teaclave-sgx-sdk?rev=v1.1.2)",
+ "sgx_tse 1.1.2 (git+https://github.com/apache/teaclave-sgx-sdk?rev=v1.1.2)",
+ "sgx_tstd",
+ "sgx_types 1.1.2 (git+https://github.com/apache/teaclave-sgx-sdk?rev=v1.1.2)",
+ "teaclave_config",
+ "teaclave_utils",
+ "thiserror",
+ "uuid 0.8.1",
+ "webpki",
+ "webpki-roots",
+ "yasna",
+]
+
+[[package]]
+name = "teaclave_config"
+version = "0.1.0"
+dependencies = [
+ "lazy_static",
+ "log 0.4.8 (git+https://github.com/mesalock-linux/log-sgx)",
+ "serde 1.0.106",
+ "serde_derive 1.0.106",
+ "sgx_tstd",
+ "toml",
+]
+
+[[package]]
+name = "teaclave_utils"
+version = "0.1.0"
+dependencies = [
+ "ring",
+ "serde 1.0.106",
+ "serde_derive 1.0.106",
+ "sgx_tstd",
+ "sgx_types 1.1.2 (git+https://github.com/apache/teaclave-sgx-sdk?rev=v1.1.2)",
+ "toml",
+]
+
+[[package]]
+name = "termcolor"
+version = "1.0.5"
+source = "git+https://github.com/mesalock-linux/termcolor-sgx#d8866cb995f79c598bc292303bb3bb4fffe5e724"
+dependencies = [
+ "sgx_tstd",
+]
+
+[[package]]
+name = "thiserror"
+version = "1.0.9"
+source = "git+https://github.com/mesalock-linux/thiserror-sgx#123039095d673a6761954c7f6ad753efe227783a"
+dependencies = [
+ "sgx_tstd",
+ "thiserror-impl",
+]
+
+[[package]]
+name = "thiserror-impl"
+version = "1.0.9"
+source = "git+https://github.com/mesalock-linux/thiserror-sgx#123039095d673a6761954c7f6ad753efe227783a"
+dependencies = [
+ "proc-macro2 1.0.12",
+ "quote 1.0.4",
+ "syn 1.0.19",
+]
+
+[[package]]
+name = "thread_local"
+version = "1.0.0"
+source = "git+https://github.com/mesalock-linux/thread_local-rs-sgx#eb03eee1141108bef5b1e60631580c026d2408e8"
+dependencies = [
+ "lazy_static",
+ "sgx_tstd",
+]
+
+[[package]]
+name = "toml"
+version = "0.5.3"
+source = "git+https://github.com/mesalock-linux/toml-rs-sgx#9ef1e2cd2b7377eedd34fb6511a407ac7b143a7b"
+dependencies = [
+ "serde 1.0.106",
+ "sgx_tstd",
+]
+
+[[package]]
+name = "typenum"
+version = "1.12.0"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "373c8a200f9e67a0c95e62a4f52fbf80c23b4381c05a17845531982fa99e6b33"
+
 [[package]]
 name = "unicode-xid"
 version = "0.1.0"
@@ -558,13 +1100,47 @@ version = "0.2.0"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "826e7639553986605ec5979c7dd957c7895e93eabed50ab2ffa7f6128a75097c"
 
+[[package]]
+name = "untrusted"
+version = "0.7.1"
+source = "registry+https://github.com/rust-lang/crates.io-index"
+checksum = "a156c684c91ea7d62626509bce3cb4e1d9ed5c4d978f7b4352658f96a4c26b4a"
+
 [[package]]
 name = "uuid"
 version = "0.7.4"
 source = "registry+https://github.com/rust-lang/crates.io-index"
 checksum = "90dbc611eb48397705a6b0f6e917da23ae517e4d127123d2cf7674206627d32a"
 dependencies = [
- "rand",
+ "rand 0.6.5",
+]
+
+[[package]]
+name = "uuid"
+version = "0.8.1"
+source = "git+https://github.com/mesalock-linux/uuid-sgx#0fffd5407fb31d229bff55ba9bc233cdd4c5edfc"
+dependencies = [
+ "rand 0.7.3",
+ "sgx_tstd",
+]
+
+[[package]]
+name = "webpki"
+version = "0.21.2"
+source = "git+https://github.com/mesalock-linux/webpki?branch=mesalock_sgx#ab35cad4197f6e421ca14da0a2eb7df86654418f"
+dependencies = [
+ "ring",
+ "sgx_tstd",
+ "untrusted",
+]
+
+[[package]]
+name = "webpki-roots"
+version = "0.19.0"
+source = "git+https://github.com/mesalock-linux/webpki-roots?branch=mesalock_sgx#4b542642de1d5a5394f8a24b356b7801e9220008"
+dependencies = [
+ "sgx_tstd",
+ "webpki",
 ]
 
 [[package]]
@@ -596,6 +1172,17 @@ dependencies = [
  "zero",
 ]
 
+[[package]]
+name = "yasna"
+version = "0.3.1"
+source = "git+https://github.com/mesalock-linux/yasna.rs-sgx#e28d16ecb426975d10ab792179e4d4f473ab872d"
+dependencies = [
+ "bit-vec",
+ "chrono",
+ "num-bigint",
+ "sgx_tstd",
+]
+
 [[package]]
 name = "zero"
 version = "0.1.2"
diff --git a/src/libos/Cargo.toml b/src/libos/Cargo.toml
index 7d50d6e..0769aed 100644
--- a/src/libos/Cargo.toml
+++ b/src/libos/Cargo.toml
@@ -37,3 +37,4 @@ sgx_tstd = { path = "../../deps/rust-sgx-sdk/sgx_tstd", features = ["backtrace"]
 sgx_trts = { path = "../../deps/rust-sgx-sdk/sgx_trts" }
 sgx_tse = { path = "../../deps/rust-sgx-sdk/sgx_tse" }
 sgx_tcrypto = { path = "../../deps/rust-sgx-sdk/sgx_tcrypto" }
+mesatee_sdk = { path = "../../trusted-mesatee-sdk/mesatee_sdk", package = "mesatee_sdk", feature = ["mesalock_sgx"]}
diff --git a/src/libos/src/entry.rs b/src/libos/src/entry.rs
index 120dd92..a8e85ff 100644
--- a/src/libos/src/entry.rs
+++ b/src/libos/src/entry.rs
@@ -15,6 +15,9 @@ use crate::util::mem_util::from_untrusted::*;
 use crate::util::sgx::allow_debug as sgx_allow_debug;
 use sgx_tse::*;
 
+use mesatee_sdk::{Mesatee, MesateeEnclaveInfo};
+use std::net::SocketAddr;
+
 pub static mut INSTANCE_DIR: String = String::new();
 static mut ENCLAVE_PATH: String = String::new();
 
@@ -30,6 +33,28 @@ macro_rules! ecall_errno {
     }};
 }
 
+lazy_static! {
+    static ref USER_ID: String = String::from("user1");
+    static ref USER_TOKEN: String = String::from("token1");
+    static ref FNS_ADDR: SocketAddr = "172.17.0.3:30007".parse().unwrap();
+    static ref PUBKEY_PATH: String = String::from("auditors/godzilla/godzilla.public.der");
+    static ref SIG_PATH: String = String::from("auditors/godzilla/godzilla.sign.sha256");
+    static ref ENCLAVE_CONFIG_PATH: String = String::from("enclave_info.toml");
+}
+
+#[no_mangle]
+pub extern "C" fn mutual_att() -> bool {
+    let mut auditors: Vec<(&str, &str)> = Vec::new();
+    auditors.push((&PUBKEY_PATH, &SIG_PATH));
+    let enclave_info: MesateeEnclaveInfo =
+        MesateeEnclaveInfo::load(auditors, &ENCLAVE_CONFIG_PATH).unwrap();
+    let mesatee: Mesatee = Mesatee::new(&enclave_info, &USER_ID, &USER_TOKEN, *FNS_ADDR).unwrap();
+    let msg: String = String::from("hello, from Occlum");
+    let task = mesatee.create_task("echo").unwrap();
+    let _res = task.invoke_with_payload(&msg);
+    true
+}
+
 #[no_mangle]
 pub extern "C" fn occlum_ecall_init(log_level: *const c_char, instance_dir: *const c_char) -> i32 {
     if HAS_INIT.load(Ordering::SeqCst) == true {
@@ -95,6 +120,8 @@ pub extern "C" fn occlum_ecall_new_process(
     if HAS_INIT.load(Ordering::SeqCst) == false {
         return ecall_errno!(EAGAIN);
     }
+    //判断返回值
+    mutual_att();
 
     let (path, args, env, host_stdio_fds) =
         match parse_arguments(path_buf, argv, env, host_stdio_fds) {
diff --git a/src/libos/src/util/sgx/sgx_attestation_agent.rs b/src/libos/src/util/sgx/sgx_attestation_agent.rs
index 6c6231b..ef0c0c3 100644
--- a/src/libos/src/util/sgx/sgx_attestation_agent.rs
+++ b/src/libos/src/util/sgx/sgx_attestation_agent.rs
@@ -112,6 +112,13 @@ impl InnerAgent {
                 quote_buf_ptr: *mut u8,            // Output
                 quote_buf_len: u32,                // Input
             ) -> sgx_status_t;
+
+            fn occlum_ocall_sgx_calc_quote_size(
+                p_retval: *mut sgx_status_t,
+                p_sig_rl: *const u8,
+                sig_rl_size: u32,
+                p_quote_size: *mut u32,
+            ) -> sgx_status_t;
         }
 
         // Prepare argments for OCall
@@ -133,9 +140,24 @@ impl InnerAgent {
         let report = rsgx_create_report(&self.target_info, report_data)
             .map_err(|_e| errno!(EINVAL, "sgx_error"))?;
         let mut qe_report = sgx_report_t::default();
-        // TODO: what if quote_buf is not big enough?
-        let mut quote_buf = [0_u8; 4096];
 
+        let mut quote_len: u32 = 0;
+        let mut rt = Default::default();
+        let status = unsafe {
+            occlum_ocall_sgx_calc_quote_size(&mut rt as _, sigrl_ptr, sigrl_size, &mut quote_len as _)
+        };
+
+        assert!(status == sgx_status_t::SGX_SUCCESS);
+        if rt != sgx_status_t::SGX_SUCCESS {
+            match rt {
+                sgx_status_t::SGX_ERROR_BUSY => {
+                    return_errno!(EBUSY, "occlum_ocall_sgx_calc_quote_size is temporarily busy")
+                }
+                _ => return_errno!(EINVAL, "occlum_ocall_sgx_calc_quote_size failed"),
+            }
+        }
+
+        let mut quote_buf = vec![0_u8; quote_len as usize];
         // Do OCall
         unsafe {
             let mut retval = Default::default();
diff --git a/src/pal/include/occlum_pal_api.h b/src/pal/include/occlum_pal_api.h
index 46c9e5a..064ed92 100644
--- a/src/pal/include/occlum_pal_api.h
+++ b/src/pal/include/occlum_pal_api.h
@@ -161,6 +161,8 @@ int occlum_pal_kill(int pid, int sig);
  */
 int occlum_pal_destroy(void);
 
+char * u_getenv_ocall(const char *name);
+
 #ifdef __cplusplus
 }
 #endif
diff --git a/src/pal/src/ocalls/attestation.c b/src/pal/src/ocalls/attestation.c
index 73c5de5..551093c 100644
--- a/src/pal/src/ocalls/attestation.c
+++ b/src/pal/src/ocalls/attestation.c
@@ -10,6 +10,13 @@ sgx_status_t occlum_ocall_sgx_init_quote(
     return sgx_init_quote(target_info, epid_group_id);
 }
 
+sgx_status_t occlum_ocall_sgx_calc_quote_size (
+    uint8_t* p_sig_rl,
+    uint32_t sig_rl_size,
+    uint32_t *p_quote_size) {
+    return sgx_calc_quote_size(p_sig_rl, sig_rl_size, p_quote_size);
+}
+
 sgx_status_t occlum_ocall_sgx_get_quote(
     uint8_t *sigrl,
     uint32_t sigrl_len,
diff --git a/src/pal/src/ocalls/env.c b/src/pal/src/ocalls/env.c
new file mode 100644
index 0000000..d51b904
--- /dev/null
+++ b/src/pal/src/ocalls/env.c
@@ -0,0 +1,5 @@
+#include "ocalls.h"
+
+char *u_getenv_ocall(const char *name) {
+    return getenv(name);
+}
diff --git a/src/pal/src/ocalls/net.c b/src/pal/src/ocalls/net.c
index badfed8..516fabe 100644
--- a/src/pal/src/ocalls/net.c
+++ b/src/pal/src/ocalls/net.c
@@ -60,3 +60,30 @@ int occlum_ocall_select(int nfds,
                         struct timeval *timeout) {
     return select(nfds, readfds, writefds, exceptfds, timeout);
 }
+
+int ocall_sgx_get_ias_socket() {
+    char *s = "api.trustedservices.intel.com";
+    char svc[6] = {0};
+    snprintf(svc, 5, "%d", 443);
+    struct addrinfo hint, *res;
+    bzero(&hint, sizeof(hint));
+    hint.ai_socktype = SOCK_STREAM;
+    int n = -1;
+    if ((n = getaddrinfo(s, svc, &hint, &res)) != 0 ) {
+        printf("getaddrinfo failed: %s\n", strerror(errno));
+        return -1;
+    }
+
+    int sockfd = socket(res->ai_family, res->ai_socktype, res->ai_protocol);
+    if (sockfd == -1) {
+        printf("socket creation failed...\n");
+        return -1;
+    }
+
+    int ret = connect(sockfd, res->ai_addr, res->ai_addrlen);
+    if (ret != 0) {
+        printf("connect error: %s\n", strerror(errno));
+        return -1;
+    }
+    return sockfd;
+}
-- 
2.17.1

